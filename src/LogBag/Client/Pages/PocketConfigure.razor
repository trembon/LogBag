@page "/pocket/{pocketName}/configure"
@inject HttpClient httpClient

<PageTitle>LogBag - Configure Pocket (@PocketName)</PageTitle>

    @code {
    [Parameter]
    public string? PocketName { get; set; }

    private bool HasChanges = false;

    private PocketColumnMetadataResponse? Metadata;
    private List<DropItem> Columns = new();

    protected override async Task OnParametersSetAsync()
    {
        Metadata = await httpClient.GetFromJsonAsync<PocketColumnMetadataResponse>($"pockets/{PocketName}/columns");

        // TODO: allow user to create rows and remove them
        // TODO: mark item if it is suggestion or created, so it can be moved back
        // TODO: save support

        Metadata?.ColumnSuggestions?.ForEach(x =>
        {
            Columns.Add(new DropItem { Name = x, Identifier = "Suggestions", IsSuggestion = true });
        });

        Metadata?.ConfiguredColumns?.ForEach(x =>
        {
            var column = Columns.FirstOrDefault(c => c.Name == x);
            if (column != null)
            {
                column.Identifier = "Selected";
            }
            else
            {
                Columns.Add(new DropItem { Name = x, Identifier = "Selected", IsSuggestion = false });
            }
        });
    }

    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        if (dropItem is not null && dropItem.Item is not null)
        {
            dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
            HasChanges = true;
        }
    }

    private async Task SaveChanges()
    {
        ConfigurePocketRequest request = new();
        request.Columns = Columns.Where(x => x.Identifier == "Selected").Select(x => x.Name).ToList();

        var response = await httpClient.PostAsJsonAsync($"pockets/{PocketName}", request);
        response.EnsureSuccessStatusCode();

        HasChanges = false;
    }

    public record DropItem
    {
        public required string Name { get; init; }
        public required string Identifier { get; set; }
        public required bool IsSuggestion { get; init; }
    }
}

<MudText Typo="Typo.h1">Configure Pocket - @PocketName</MudText>

<MudDivider Class="mb-5 mt-2" />

<MudText Typo="Typo.h2">Columns</MudText>
<MudText Typo="Typo.subtitle1" GutterBottom>Configure which columns to that will be displayed in the table.</MudText>

<MudDropContainer T="DropItem" Items="Columns" ItemsSelector="@((item, dropzone) => item.Identifier == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
    <ChildContent>
        <MudDropZone T="DropItem" Identifier="Selected" AllowReorder Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
            <MudText Typo="Typo.h6" Class="mb-4">Selected columns</MudText>
        </MudDropZone>
        <MudDropZone T="DropItem" Identifier="Suggestions" Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
            <MudText Typo="Typo.h6" Class="mb-4">Column suggestions</MudText>
        </MudDropZone>
    </ChildContent>
    <ItemRenderer>
        <MudPaper Elevation="25" Class="pa-4 my-4">@context.Name</MudPaper>
    </ItemRenderer>
</MudDropContainer>

    <MudPaper Class="pa-4 ma-2 d-flex justify-end flex-grow-1 gap-4">
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Primary" Size="Size.Small" Disabled=(!HasChanges) OnClick="SaveChanges">Save changes</MudButton>
    </MudPaper>